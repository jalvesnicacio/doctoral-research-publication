version: '3.5'
#@system-title: Newsfeed system
#@start-point: user
services:

  loadbalancer:
    #@function: load balancer
    #@tecnology: nginx
    container_name: load balancer
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - webserver
    ports:
      - "4000:4000"

  webserver:
    #@function: web server
    #@tecnology: apache
    image: httpd:latest
    container_name: webserver
    hostname: webserver01
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      - postservice
      - fanoutservice
      - notificationservice
    expose:
      - "8080"
    volumes:
      - ./conf:/conf

  db:
    image: postgres:14.1-alpine
    container_name: database
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql

  cache:
    #@technology: redis
    container_name: cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data

  postservice:
    container_name: api-post-service
    image: casestudy/postservice
    build: ./post
    depends_on:
      - db
      - cache
    ports:
      - 3000:8080
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

  fanoutservice:
    container_name: api-fanout-service
    image: casestudy/fanoutservice
    build: ./fanout
    depends_on:
      - db
      - cache
      - messagequeue
    ports:
      - 3001:8080
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

  notificationservice:
    container_name: notification-service
    image: casestudy/notificationservice
    build: ./notification
    depends_on:
      - db
      - cache
    ports:
      - 3002:8080
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

  messagequeue:
    #@function: message queue
    image: redis:6.2-alpine
    container_name: message_queue
    ports:
      - "6380:6380"
    volumes:
      - ./redis:/redis

  worker:
    image: worker-image:latest
    container_name: pub-sub-worker
    build: ./worker
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      - messagequeue
    command: rq worker --url redis://redis:6380
    links:
      - messagequeue

volumes:
  cache:
    driver: local
  db:
    driver: local

networks:
  default:
    driver: bridge
    name: newsfeed
